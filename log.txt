# Chapter 1: Getting Started
```
npx create-next-app@latest nextjs-dashboard --use-npm --example "https://github.com/vercel/next-learn/tree/main/dashboard/starter-example"
cd nextjs-dashboard
echo "*.swp" >> .gitignore
npm i
npm run dev
```

# Chapter 2: CSS Styling
```
$ vim app/layout.tsx
+ import '@/app/ui/global.css';

$ vim app/page.tsx
+ <div className="h-0 w-0 border-b-[30px] border-l-[20px] border-r-[20px] border-b-black border-l-transparent border-r-transparent" />

$ vim app/ui/home.module.css
+ .shape {
+   height: 0;
+   width: 0;
+   border-bottom: 30px solid black;
+   border-left: 20px solid transparent;
+   border-right: 20px solid transparent;
+ }

$ vim app/page.tsx
+ import styles from './home.module.css';
```
- Import Error: `Module not found: Can't resolve`
	- Resolved by `import styles from '@/app/ui/home.module.css';`
- `nav-links.tsx` seems to not have `cslx`

# Chapter 3: Optimizing font images
```
$ vim /app/ui/fonts.ts
+ import { Inter } from 'next/font/google';
+ 
+ export const inter = Inter({ subsets: ['latin'] });

$ vim app/layout.tsx
+ import { inter } from '@/app/ui/fonts';
...
-     <body>{children}</body>
+     <body className={`${inter.className} antialiased`}>{children}</body>

$ vim /app/ui/fonts.ts
+ import { Lusitana } from 'next/font/google';
+ 
+ export const lusitana = Lusitana({ subsets: ['latin'], weight: '700' });

$ vim app/page.tsx
-       { /* <AcmeLogo /> */ }
+       {  <AcmeLogo /> }
...
-          <p className={`text-xl text-gray-800 md:text-3xl md:leading-normal`}>
+          <p className={`${lusitana.className} text-xl text-gray-800 md:text-3xl md:leading-normal`
}>

# Optimize images
$ vim app/page.tsx
-          {/* Add Hero Images Here */}
+                 <Image
+                   src="/hero-desktop.png"
+                       width={1000}
+                       height={760}
+                       className="hidden md:block"
+                       alt="Screenshots of the dashboard project showing desktop and mobile versions"
+             />
+                 <Image
+                   src="/hero-mobile.png"
+                       width={560}
+                       height={620}
+                       className="block md:hidden"
+                       alt="Screenshots of the dashboard project showing desktop and mobile versions"
+             />
```
- `hidden` to remove the image from the DOM on mobile screens, and `md:block` to show the image on desktop screens.

# Chapter 4: Creating Layouts and Pages
```
$ mkdir app/login app/dashboard
$ vim app/login/page.tsx

$ vim app/dashboard/page.tsx
+export default function Page() {
+  return <p>Dashboard Page</p>;
+}

$ mkdir app/dashboard/customers app/dashboard/invoices
$ vim app/dashboard/customers/page.tsx
$ vim app/dashboard/invoices/page.tsx
```
## Creating the dashboard layout
```
$ vim app/dashboard/layout.tsx
+export default function Page() {
+  return (
+    <main className="flex min-h-screen flex-col p-6">
+	  <div>This is login page</div>
+    </main>
+  );
+}
```

# Chapter 5: Navigate Between Pages
## The <Link> component
```
$ vim app/ui/dashboard/nav-links.tsx
+import Link from "next/link";
...
-          <a
+          <Link
...
-          </a>
+          </Link>
```

## Pattern: Showing active links
```
$ vim app/ui/dashboard/nav-links.tsx
+'use client';
...
+import { usePathname } from 'next/navigation';
+import clsx from 'clsx';
...
+  const pathname = usePathname();
...
-            className="flex h-[48px] grow items-center justify-center gap-2 rounded-md bg-gray-50 p-3 text-sm font-medium hover:bg-sky-100 hover:text-blue-600 md:flex-none md:justify-start md:p-2 md:px-3"
+            className={clsx(
+                               "flex h-[48px] grow items-center justify-center gap-2 rounded-md bg-gray-50 p-3 text-sm font-medium hover:bg-sky-100 hover:text-blue-600 md:flex-none md:justify-start md:p-2 md:px-3",
+                               {
+                                       'bg-sky-100 text-blue-600': pathname === link.href,
+                               },
+                       )}
```

### Automatic code-splitting and prefetching
- Next.js automatically code splits your application by route segments
- in a production, whenever <Link> components appear in the browser's viewport, Next.js automatically prefetches the code for the linked route in the background

# Chapter 6: Setting Up Your Database
## Create a GitHub repository
## Create a Vercel account
## Connect and deploy your project
## Create a Postgres database
```
$ vim .env
$ npm i @vercel/postgres
```
## Seed your database
- `scripts/seed.js`
```
$ vim package.json
+       "seed": "node -r dotenv/config ./scripts/seed.js"

$ npm i bcrypt
$ npm run seed
```
## Exploring your database
## Executing queries

# Chapter 7: Fetching Data
## Choosing how to fetch data
- API Layer
- Database queries
### Using Server Components to fetch data
### Using SQL
```
$ view app/lib/data.ts
```
## Fetching data for the dashboard overview page
### Fetching data for <RevenueChart/>
```
$ vim app/dashboard/page.tsx
+import { fetchRevenue } from '@/app/lib/data';
+  const revenue = await fetchRevenue();
-        {/* <RevenueChart revenue={revenue}  /> */}
+        <RevenueChart revenue={revenue}  />
```
### Fetching data for <LatestInvoices/>
```
$ vim app/dashboard/page.tsx
-import { fetchRevenue } from '@/app/lib/data';
+import { fetchRevenue, fetchLatestInvoices } from '@/app/lib/data';
+  const latestInvoices = await fetchLatestInvoices();
-        {/* <LatestInvoices latestInvoices={latestInvoices} /> */}
+        <LatestInvoices latestInvoices={latestInvoices} />
```
### Practice: Fetch data for the <Card> components
### Parallel data fetching
```
```

# Chapter 8: Static and Dynamic Rendering
## What is Static Rendering?
- Data fetching and rendering happens on the server at build time (when you deploy) or during revalidation.
## What is Dynamic Rendering?
- Content is rendered on the server for each user at request time
## Making the dashboard dynamic
```
+import { unstable_noStore as noStore } from "next/cache";
...
+  noStore();
```
## Simulating a Slow Data Fetch
- With dynamic rendering, your application is only as fast as your slowest data fetch.
```
+    console.log('Fetching revenue data...');
+    await new Promise((resolve) => setTimeout(resolve, 3000));
+    console.log('Data fetch complete after 3 seconds.');
```

# Chapter 9: Streaming
## Streaming a whole page with loading.tsx
```
$ vim app/dashboard/loading.tsx
+export default function Loading() {
+  return <div>Loading...</div>;
+}
```
### Addding loading skeleton
```
$ vim app/dashboard/loading.tsx
+import DashboardSkeleton from '@/app/ui/skeletons';
+  return <DashboardSkeleton />;
```
### Fixing the loading skeleton bug with route groups
```
$ mkdir 'app/dashboard/(overview)'
$ mv app/dashboard/loading.tsx "app/dashboard/(overview)/"
$ mv app/dashboard/page.tsx "app/dashboard/(overview)/"
```
### Streaming a component

# Chapter 10: Partial Rendering (Optional)
- Partial rendering is a hybrid approach that combines the best of static and dynamic rendering.
- This is different from how your application behaves today, where whole routes were fully static or dynamic.
- Is it different from Streaming with Suspense?

# Chapter 11: Adding Search and Pagination
## Starting code
## Adding the search functionality
- "use client" - This is a Client Component, which means you can use event listeners and hooks.
```
defaultValue vs. value / Controlled vs. Uncontrolled

If you're using state to manage the value of an input, you'd use the value attribute to make it a controlled component. This means React would manage the input's state.

However, since you're not using state, you can use defaultValue. This means the native input will manage its own state. This is ok since you're saving the search query to the URL instead of state.
```
## Best practice: Debouncing
```
$ npm i use-debounce
```

# Chapter 12: Mutating Data
## Creating an invoice
### 1. Create a new route and form
```
$ mkdir app/dashboard/invoices/create
$ vim app/dashboard/invoices/create/page.tsx
```

### 2. Create a Server Action
```
$ vim app/lib/actions.ts
```
- Good to know: In normal HTML, you'd pass a URL to the action attribute. This URL would be destination where your form data should be submitted (usually an API endpoint).
- However, in React, the action attribute is considered a special prop - meaning React builds on top of it to allow actions to be invoked.
- Behind the scenes, Server Actions create a POST API endpoint. This is why you don't need to create API endpoints when using Server Actions.

### 3. Extract the data from formData
- Tip: If you're working with forms that have many fields, you may want to consider using the entries() method with JavaScript's Object.fromEntries(). For example:
- `const rawFormData = Object.fromEntries(formData.entries())`

### 4. Validate and prepare the data
```
$ npm i zod
```

### 5. Inserting the data into your database
### 6. Revalidate and redirect

## Updating an invoice
1. Create a new dynamic route segment with the invoice id.
2. Read the invoice id from the page params.
3. Fetch the specific invoice from your database.
4. Pre-populate the form with the invoice data.
5. Update the invoice data in your database.
### 1. Create a new dynamic route segment with the invoice id.
```
$ mkdir -p "app/dashboard/invoices/[id]/edit"
$ vim "app/dashboard/invoices/[id]/edit/page.tsx"
```
### 4. Pass the id to the Server Action
```
const updateInvoiceWithId = updateInvoice.bind(null, invoice.id);
```
- Note: Using a hidden input field in your form also works (e.g. <input type="hidden" name="id" value={invoice.id} />). However, the values will appear as full text in the HTML source, which is not ideal for sensitive data like ids.

```
$ vim app/lib/actions.ts
+  const { customerId, amount, status } = UpdateInvoice.parse({
+	id: formData.get('id'),
+    customerId: formData.get('customerId'),
+    amount: formData.get('amount'),
+    status: formData.get('status'),
+  });
```
- `id` is a required field in the UpdateInvoice schema, typo in the material
## Deleting an invoice

# Chapter 13: Handling Errors
## Adding `try/catch` to Server Actions
- Note how redirect is being called outside of the try/catch block. This is because redirect works by throwing an error which would be caught by the catch block. To avoid this, you can call redirect after try/catch. redirect would only be reachable if try is successful.
## Handling all errors with error.tsx
```
$ vim app/dashboard/invoices/error.tsx
```

## Handling 404 errors with the notFound function
- Invoking the notFound() function throws a NEXT_NOT_FOUND error and terminates rendering of the route segment in which it was thrown.

# Chapter 14: Improving Accessibility
## What is accessibility?
https://web.dev/learn/accessibility/

## Using the ESLint accessibility plugin in Next.js
```
$ vim package.json
+    "lint": "next lint --help"
$ npm run lint
Warning: Image elements must have an alt prop,
```
- I don't see the warning in my environment. Why?

## Improving form accessibility
- Semantic HTML
- Labelling: `<label>` and the `htmlFor` attribute
- Focus Outline: 

## Form validation
### Client-Side validation
- `required` attribute to `<input>`, `<select>`, and `<textarea>` elements

## Server-Side validation

# Chapter 15: Authentication
## What is authentication?
### Authentication vs. Authorization
- Authentication checks who you are
- Authorization determines what you can

## Creating the login route
```
$ mkdir app/login
$ vim app/login/page.tsx
```

## NextAuth.js
https://authjs.dev/reference/nextjs

## Setting up NextAuth.js
```
$ npm i next-auth@beta bcrypt
$ openssl rand -base64 32
$ vim .env
AUTH_SECRET=
AUTH_URL=http://localhost:3000/api/auth
```

## Protecting your routes with Next.js Middleware
```
$ vim auth.config.ts
$ vim middleware.ts
```
### Password hashing
- What is the difference between `auth.ts` and `middleware.ts`?
- middleware.ts : `export default NextAuth(authConfig).auth;`
- auth.ts : below
```
export const { auth, signIn, signOut } = NextAuth({
	...authConfig,
});
```
### Adding Credentials provider
https://authjs.dev/getting-started/providers/oauth-tutorial
https://authjs.dev/getting-started/providers/email-tutorial
https://authjs.dev/getting-started/providers

