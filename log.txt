# Chapter 1: Getting Started
```
npx create-next-app@latest nextjs-dashboard --use-npm --example "https://github.com/vercel/next-learn/tree/main/dashboard/starter-example"
cd nextjs-dashboard
echo "*.swp" >> .gitignore
npm i
npm run dev
```

# Chapter 2: CSS Styling
```
$ vim app/layout.tsx
+ import '@/app/ui/global.css';

$ vim app/page.tsx
+ <div className="h-0 w-0 border-b-[30px] border-l-[20px] border-r-[20px] border-b-black border-l-transparent border-r-transparent" />

$ vim app/ui/home.module.css
+ .shape {
+   height: 0;
+   width: 0;
+   border-bottom: 30px solid black;
+   border-left: 20px solid transparent;
+   border-right: 20px solid transparent;
+ }

$ vim app/page.tsx
+ import styles from './home.module.css';
```
- Import Error: `Module not found: Can't resolve`
	- Resolved by `import styles from '@/app/ui/home.module.css';`
- `nav-links.tsx` seems to not have `cslx`

# Chapter 3: Optimizing font images
```
$ vim /app/ui/fonts.ts
+ import { Inter } from 'next/font/google';
+ 
+ export const inter = Inter({ subsets: ['latin'] });

$ vim app/layout.tsx
+ import { inter } from '@/app/ui/fonts';
...
-     <body>{children}</body>
+     <body className={`${inter.className} antialiased`}>{children}</body>

$ vim /app/ui/fonts.ts
+ import { Lusitana } from 'next/font/google';
+ 
+ export const lusitana = Lusitana({ subsets: ['latin'], weight: '700' });

$ vim app/page.tsx
-       { /* <AcmeLogo /> */ }
+       {  <AcmeLogo /> }
...
-          <p className={`text-xl text-gray-800 md:text-3xl md:leading-normal`}>
+          <p className={`${lusitana.className} text-xl text-gray-800 md:text-3xl md:leading-normal`
}>

# Optimize images
$ vim app/page.tsx
-          {/* Add Hero Images Here */}
+                 <Image
+                   src="/hero-desktop.png"
+                       width={1000}
+                       height={760}
+                       className="hidden md:block"
+                       alt="Screenshots of the dashboard project showing desktop and mobile versions"
+             />
+                 <Image
+                   src="/hero-mobile.png"
+                       width={560}
+                       height={620}
+                       className="block md:hidden"
+                       alt="Screenshots of the dashboard project showing desktop and mobile versions"
+             />
```
- `hidden` to remove the image from the DOM on mobile screens, and `md:block` to show the image on desktop screens.

# Chapter 4: Creating Layouts and Pages
```
$ mkdir app/login app/dashboard
$ vim app/login/page.tsx

$ vim app/dashboard/page.tsx
+export default function Page() {
+  return <p>Dashboard Page</p>;
+}

$ mkdir app/dashboard/customers app/dashboard/invoices
$ vim app/dashboard/customers/page.tsx
$ vim app/dashboard/invoices/page.tsx
```
## Creating the dashboard layout
```
$ vim app/dashboard/layout.tsx
+export default function Page() {
+  return (
+    <main className="flex min-h-screen flex-col p-6">
+	  <div>This is login page</div>
+    </main>
+  );
+}
```

# Chapter 5: Navigate Between Pages
## The <Link> component
```
$ vim app/ui/dashboard/nav-links.tsx
+import Link from "next/link";
...
-          <a
+          <Link
...
-          </a>
+          </Link>
```

## Pattern: Showing active links
```
$ vim app/ui/dashboard/nav-links.tsx
+'use client';
...
+import { usePathname } from 'next/navigation';
+import clsx from 'clsx';
...
+  const pathname = usePathname();
...
-            className="flex h-[48px] grow items-center justify-center gap-2 rounded-md bg-gray-50 p-3 text-sm font-medium hover:bg-sky-100 hover:text-blue-600 md:flex-none md:justify-start md:p-2 md:px-3"
+            className={clsx(
+                               "flex h-[48px] grow items-center justify-center gap-2 rounded-md bg-gray-50 p-3 text-sm font-medium hover:bg-sky-100 hover:text-blue-600 md:flex-none md:justify-start md:p-2 md:px-3",
+                               {
+                                       'bg-sky-100 text-blue-600': pathname === link.href,
+                               },
+                       )}
```

### Automatic code-splitting and prefetching
- Next.js automatically code splits your application by route segments
- in a production, whenever <Link> components appear in the browser's viewport, Next.js automatically prefetches the code for the linked route in the background

# Chapter 6: Setting Up Your Database
## Create a GitHub repository
## Create a Vercel account
## Connect and deploy your project
## Create a Postgres database
```
$ vim .env
$ npm i @vercel/postgres
```
## Seed your database
- `scripts/seed.js`
```
$ vim package.json
+       "seed": "node -r dotenv/config ./scripts/seed.js"

$ npm i bcrypt
$ npm run seed
```
## Exploring your database
## Executing queries

# Chapter 7: Fetching Data
## Choosing how to fetch data
- API Layer
- Database queries
### Using Server Components to fetch data
### Using SQL
```
$ view app/lib/data.ts
```
## Fetching data for the dashboard overview page
```
$ vim app/dashboard/page.tsx
+import { fetchRevenue } from '@/app/lib/data';
+  const revenue = await fetchRevenue();
-        {/* <RevenueChart revenue={revenue}  /> */}
+        <RevenueChart revenue={revenue}  />
```
